digraph "classes" {
rankdir=BT
charset="utf-8"
"agent_core.core.AgentCore" [color="black", fontcolor="black", label=<{AgentCore|planner<br ALIGN="LEFT"/>runner<br ALIGN="LEFT"/>|__init__(memory: 'MemoryInterface', tools: 'ToolRegistry', llm: 'LLMClient')<br ALIGN="LEFT"/>run(user_input: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.types.state.AgentState" [color="black", fontcolor="black", label=<{AgentState|history : List[Tuple[Any, Any]]<br ALIGN="LEFT"/>memory_context : List[dict]<br ALIGN="LEFT"/>step_count : int<br ALIGN="LEFT"/>user_input : str<br ALIGN="LEFT"/>|__init__(self, user_input: str, memory_context: List[dict], history: List[Tuple[Any, Any]], step_count: int): None<br ALIGN="LEFT"/>add_tool_result(tool_call, result)<br ALIGN="LEFT"/>get_context_window(max_items: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"pydantic.main.BaseModel" [color="black", fontcolor="black", label=<{BaseModel|__class_vars__ : ClassVar[set[str]]<br ALIGN="LEFT"/>__fields__<br ALIGN="LEFT"/>__fields_set__<br ALIGN="LEFT"/>__pretty__<br ALIGN="LEFT"/>__private_attributes__ : ClassVar[Dict[str, ModelPrivateAttr]]<br ALIGN="LEFT"/>__pydantic_complete__ : ClassVar[bool]<br ALIGN="LEFT"/>__pydantic_computed_fields__ : ClassVar[Dict[str, ComputedFieldInfo]]<br ALIGN="LEFT"/>__pydantic_core_schema__ : ClassVar[CoreSchema]<br ALIGN="LEFT"/>__pydantic_custom_init__ : ClassVar[bool]<br ALIGN="LEFT"/>__pydantic_decorators__ : ClassVar[_decorators.DecoratorInfos]<br ALIGN="LEFT"/>__pydantic_extra__ : dict[str, Any] \| None<br ALIGN="LEFT"/>__pydantic_fields__ : ClassVar[Dict[str, FieldInfo]]<br ALIGN="LEFT"/>__pydantic_fields_set__ : set[str]<br ALIGN="LEFT"/>__pydantic_generic_metadata__ : ClassVar[_generics.PydanticGenericMetadata]<br ALIGN="LEFT"/>__pydantic_parent_namespace__ : Optional[ClassVar[Dict[str, Any] \| None]]<br ALIGN="LEFT"/>__pydantic_post_init__ : ClassVar[None \| Literal['model_post_init']]<br ALIGN="LEFT"/>__pydantic_private__ : dict[str, Any] \| None<br ALIGN="LEFT"/>__pydantic_root_model__ : ClassVar[bool]<br ALIGN="LEFT"/>__pydantic_serializer__ : ClassVar[SchemaSerializer]<br ALIGN="LEFT"/>__pydantic_validator__ : ClassVar[SchemaValidator \| PluggableSchemaValidator]<br ALIGN="LEFT"/>__repr_name__<br ALIGN="LEFT"/>__repr_recursion__<br ALIGN="LEFT"/>__repr_str__<br ALIGN="LEFT"/>__rich_repr__<br ALIGN="LEFT"/>__signature__ : ClassVar[Signature]<br ALIGN="LEFT"/>__slots__ : tuple<br ALIGN="LEFT"/>model_computed_fields : ClassVar[dict[str, ComputedFieldInfo]]<br ALIGN="LEFT"/>model_config : ClassVar[ConfigDict]<br ALIGN="LEFT"/>model_extra<br ALIGN="LEFT"/>model_fields : ClassVar[dict[str, FieldInfo]]<br ALIGN="LEFT"/>model_fields_set<br ALIGN="LEFT"/>|__class_getitem__(typevar_values: type[Any] \| tuple[type[Any], ...]): type[BaseModel] \| _forward_ref.PydanticRecursiveRef<br ALIGN="LEFT"/>__copy__(): Self<br ALIGN="LEFT"/>__deepcopy__(memo: dict[int, Any] \| None): Self<br ALIGN="LEFT"/>__delattr__(item: str): Any<br ALIGN="LEFT"/>__eq__(other: Any): bool<br ALIGN="LEFT"/>__get_pydantic_core_schema__(): CoreSchema<br ALIGN="LEFT"/>__get_pydantic_json_schema__(): JsonSchemaValue<br ALIGN="LEFT"/>__getattr__(item: str): Any<br ALIGN="LEFT"/>__getstate__(): dict[Any, Any]<br ALIGN="LEFT"/>__init__(): None<br ALIGN="LEFT"/><I>__init_subclass__</I>()<br ALIGN="LEFT"/>__iter__(): TupleGenerator<br ALIGN="LEFT"/><I>__pydantic_init_subclass__</I>(): None<br ALIGN="LEFT"/>__replace__(): Self<br ALIGN="LEFT"/>__repr__(): str<br ALIGN="LEFT"/>__repr_args__(): _repr.ReprArgs<br ALIGN="LEFT"/>__setattr__(name: str, value: Any): None<br ALIGN="LEFT"/>__setstate__(state: dict[Any, Any]): None<br ALIGN="LEFT"/>__str__(): str<br ALIGN="LEFT"/>_calculate_keys(): Any<br ALIGN="LEFT"/>_check_frozen(name: str, value: Any): None<br ALIGN="LEFT"/>_copy_and_set_values(): Any<br ALIGN="LEFT"/>_get_value(): Any<br ALIGN="LEFT"/>_iter(): Any<br ALIGN="LEFT"/>construct(_fields_set: set[str] \| None): Self<br ALIGN="LEFT"/>copy(): Self<br ALIGN="LEFT"/>dict(): Dict[str, Any]<br ALIGN="LEFT"/>from_orm(obj: Any): Self<br ALIGN="LEFT"/>json(): str<br ALIGN="LEFT"/>model_construct(_fields_set: set[str] \| None): Self<br ALIGN="LEFT"/>model_copy(): Self<br ALIGN="LEFT"/>model_dump(): dict[str, Any]<br ALIGN="LEFT"/>model_dump_json(): str<br ALIGN="LEFT"/>model_json_schema(by_alias: bool, ref_template: str, schema_generator: type[GenerateJsonSchema], mode: JsonSchemaMode): dict[str, Any]<br ALIGN="LEFT"/>model_parametrized_name(params: tuple[type[Any], ...]): str<br ALIGN="LEFT"/><I>model_post_init</I>(__context: Any): None<br ALIGN="LEFT"/>model_rebuild(): bool \| None<br ALIGN="LEFT"/>model_validate(obj: Any): Self<br ALIGN="LEFT"/>model_validate_json(json_data: str \| bytes \| bytearray): Self<br ALIGN="LEFT"/>model_validate_strings(obj: Any): Self<br ALIGN="LEFT"/>parse_file(path: str \| Path): Self<br ALIGN="LEFT"/>parse_obj(obj: Any): Self<br ALIGN="LEFT"/>parse_raw(b: str \| bytes): Self<br ALIGN="LEFT"/>schema(by_alias: bool, ref_template: str): Dict[str, Any]<br ALIGN="LEFT"/>schema_json(): str<br ALIGN="LEFT"/>update_forward_refs(): None<br ALIGN="LEFT"/>validate(value: Any): Self<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.memory.client.Collection" [color="black", fontcolor="black", label=<{Collection|<br ALIGN="LEFT"/>|<I>add</I>(embeddings: List[np.ndarray], documents: List[str], metadatas: List[Dict])<br ALIGN="LEFT"/><I>query</I>(query_embeddings: np.ndarray, n_results: int): List[Dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.types.messages.FinalAnswer" [color="black", fontcolor="black", label=<{FinalAnswer|output : str<br ALIGN="LEFT"/>|__init__(output: str)<br ALIGN="LEFT"/>is_final()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.llm.gemini.GeminiLLM" [color="black", fontcolor="black", label=<{GeminiLLM|embedding_model : GenerativeModel<br ALIGN="LEFT"/>model : GenerativeModel<br ALIGN="LEFT"/>|__init__(api_key: str, model: str)<br ALIGN="LEFT"/>complete(prompt: str, functions: dict): dict<br ALIGN="LEFT"/>embed_text(text: str): list[float]<br ALIGN="LEFT"/>parse_response(response: dict): Union[ToolCall, FinalAnswer]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.llm.llm_client.LLMClient" [color="black", fontcolor="black", label=<{LLMClient|model<br ALIGN="LEFT"/>|__init__(model)<br ALIGN="LEFT"/>complete(prompt: str, functions: list): dict<br ALIGN="LEFT"/>parse_response(response: dict)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.llm.planner.LLMPlanner" [color="black", fontcolor="black", label=<{LLMPlanner|llm_client<br ALIGN="LEFT"/>prompt_builder<br ALIGN="LEFT"/>tool_registry : str<br ALIGN="LEFT"/>|__init__(llm_client: LLMClient, tool_registry: 'ToolRegistry')<br ALIGN="LEFT"/>choose_action(state: 'AgentState'): Union[ToolCall, FinalAnswer]<br ALIGN="LEFT"/>force_finish(state: 'AgentState'): str<br ALIGN="LEFT"/><I>on_tool_completion</I>(tool_name: str, result: Any)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.graph_runner.LangGraphRunner" [color="black", fontcolor="black", label=<{LangGraphRunner|max_steps : int<br ALIGN="LEFT"/>memory : str<br ALIGN="LEFT"/>planner : str<br ALIGN="LEFT"/>tools : str<br ALIGN="LEFT"/>|__init__(memory: 'MemoryInterface', tools: 'ToolRegistry', planner: 'LLMPlanner')<br ALIGN="LEFT"/>run(user_input: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.logs.models.LogEntry" [color="black", fontcolor="black", label=<{LogEntry|agent_response : str<br ALIGN="LEFT"/>memory_used : Optional[list]<br ALIGN="LEFT"/>timestamp : str<br ALIGN="LEFT"/>tool_called : Optional[str]<br ALIGN="LEFT"/>tool_output : Optional[str]<br ALIGN="LEFT"/>user_input : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"agent_core.memory.interface.MemoryInterface" [color="black", fontcolor="black", label=<{MemoryInterface|<br ALIGN="LEFT"/>|<I>add</I>(content: str, metadata: dict)<br ALIGN="LEFT"/><I>query</I>(query: str, k: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.memory.client.MockCollection" [color="black", fontcolor="black", label=<{MockCollection|documents : list<br ALIGN="LEFT"/>metadatas : list<br ALIGN="LEFT"/>vectors : list<br ALIGN="LEFT"/>|__init__()<br ALIGN="LEFT"/>add(embeddings: List[np.ndarray], documents: List[str], metadatas: List[Dict])<br ALIGN="LEFT"/>query(query_embeddings: np.ndarray, n_results: int): List[Dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.memory.client.MockVectorDBClient" [color="black", fontcolor="black", label=<{MockVectorDBClient|collections : dict<br ALIGN="LEFT"/>|__init__()<br ALIGN="LEFT"/>embed_text(text: str): np.ndarray<br ALIGN="LEFT"/>get_or_create_collection(name: str): 'MockCollection'<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.llm.prompt_builder.PromptBuilder" [color="black", fontcolor="black", label=<{PromptBuilder|tool_registry : str<br ALIGN="LEFT"/>|__init__(tool_registry: 'ToolRegistry')<br ALIGN="LEFT"/>build(state: 'AgentState'): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.tools.base.Tool" [color="black", fontcolor="black", label=<{Tool|description : str<br ALIGN="LEFT"/>func : Callable<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>parameters : Dict<br ALIGN="LEFT"/>|__init__(name: str, func: Callable, description: str, parameters: Dict)<br ALIGN="LEFT"/>execute()<br ALIGN="LEFT"/>validate_args(kwargs: Dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.types.messages.ToolCall" [color="black", fontcolor="black", label=<{ToolCall|args : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|__init__(name: str, args: dict)<br ALIGN="LEFT"/>is_final()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.tools.base.ToolRegistry" [color="black", fontcolor="black", label=<{ToolRegistry|_llm_planner : NoneType, str<br ALIGN="LEFT"/>tools : Dict[str, Tool]<br ALIGN="LEFT"/>|__init__()<br ALIGN="LEFT"/>get_schema(): dict<br ALIGN="LEFT"/>register(tool: Tool)<br ALIGN="LEFT"/>run_tool(name: str): Any<br ALIGN="LEFT"/>set_planner(planner: 'LLMPlanner')<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.memory.client.VectorDBClient" [color="black", fontcolor="black", label=<{VectorDBClient|<br ALIGN="LEFT"/>|<I>embed_text</I>(text: str): np.ndarray<br ALIGN="LEFT"/><I>get_or_create_collection</I>(name: str): 'Collection'<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.memory.vector_memory.VectorMemory" [color="black", fontcolor="black", label=<{VectorMemory|client<br ALIGN="LEFT"/>collection<br ALIGN="LEFT"/>|__init__(client: VectorDBClient)<br ALIGN="LEFT"/>add(content: str, metadata: dict)<br ALIGN="LEFT"/>query(query: str, k: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.llm.gemini.GeminiLLM" -> "agent_core.llm.llm_client.LLMClient" [arrowhead="empty", arrowtail="none"];
"agent_core.logs.models.LogEntry" -> "pydantic.main.BaseModel" [arrowhead="empty", arrowtail="none"];
"agent_core.memory.client.MockCollection" -> "agent_core.memory.client.Collection" [arrowhead="empty", arrowtail="none"];
"agent_core.memory.client.MockVectorDBClient" -> "agent_core.memory.client.VectorDBClient" [arrowhead="empty", arrowtail="none"];
"agent_core.memory.vector_memory.VectorMemory" -> "agent_core.memory.interface.MemoryInterface" [arrowhead="empty", arrowtail="none"];
"agent_core.graph_runner.LangGraphRunner" -> "agent_core.core.AgentCore" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="runner", style="solid"];
"agent_core.llm.planner.LLMPlanner" -> "agent_core.core.AgentCore" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="planner", style="solid"];
"agent_core.llm.prompt_builder.PromptBuilder" -> "agent_core.llm.planner.LLMPlanner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prompt_builder", style="solid"];
"agent_core.llm.llm_client.LLMClient" -> "agent_core.llm.planner.LLMPlanner" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="llm_client", style="solid"];
"agent_core.memory.client.VectorDBClient" -> "agent_core.memory.vector_memory.VectorMemory" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="client", style="solid"];
}
