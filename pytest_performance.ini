[tool:pytest]
# Performance-optimized pytest configuration

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Performance optimization settings
addopts = 
    --strict-markers
    --strict-config
    --tb=short
    --maxfail=10
    --durations=10
    --cache-clear
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-omit=*/tests/*
    --cov-omit=*/venv/*
    --cov-omit=*/__pycache__/*
    --cov-omit=*/migrations/*
    --cov-omit=*/conftest.py

# Parallel execution (uncomment to enable)
# -n auto

# Performance markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    fast: marks tests as fast
    parallel: marks tests for parallel execution
    cache: marks tests that use caching
    performance: marks performance-related tests
    integration: marks integration tests
    unit: marks unit tests

# Test timeout (in seconds)
timeout = 300

# Minimum version requirements
minversion = 6.0

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Performance optimization plugins
plugins =
    pytest-cov
    pytest-timeout
    pytest-xdist
    pytest-benchmark
    pytest-cache
    pytest-html

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */__pycache__/*
    */migrations/*
    */conftest.py
    */setup.py
    */venv_personal_assistant/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml
