digraph "classes_project_name" {
rankdir=BT
charset="utf-8"
"agent_core.core.AgentCore" [color="black", fontcolor="black", label=<{AgentCore|planner<br ALIGN="LEFT"/>runner<br ALIGN="LEFT"/>|run(user_input: str, user_id: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.agent_runner.AgentRunner" [color="black", fontcolor="black", label=<{AgentRunner|max_steps : int<br ALIGN="LEFT"/>planner : str<br ALIGN="LEFT"/>tools : str<br ALIGN="LEFT"/>|run(user_input: str): str<br ALIGN="LEFT"/>set_context(agent_state: AgentState, ltm_context: list, rag_context: list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.types.state.AgentState" [color="black", fontcolor="black", label=<{AgentState|conversation_history : list<br ALIGN="LEFT"/>focus : List[str]<br ALIGN="LEFT"/>history : List[Tuple[Any, Any]]<br ALIGN="LEFT"/>last_tool_result : Optional[Any]<br ALIGN="LEFT"/>memory_context : List[dict]<br ALIGN="LEFT"/>step_count : int<br ALIGN="LEFT"/>user_input : str<br ALIGN="LEFT"/>|add_tool_result(tool_call: ToolCall, result: Any)<br ALIGN="LEFT"/>from_summary(summary: str): 'AgentState'<br ALIGN="LEFT"/>get_context_window(max_items: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.tools.calendar.calendar_tool.CalendarClient" [color="black", fontcolor="black", label=<{CalendarClient|<br ALIGN="LEFT"/>|create_event(title: str, start_time: datetime, end_time: datetime, description: str, location: str): dict<br ALIGN="LEFT"/>get_event_details(event_id: str): dict<br ALIGN="LEFT"/>get_events(start_date: Optional[datetime], end_date: Optional[datetime], limit: int): List[dict]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.tools.calendar.calendar.CalendarEvent" [color="black", fontcolor="black", label=<{CalendarEvent|description : Optional[str]<br ALIGN="LEFT"/>end : datetime<br ALIGN="LEFT"/>id : Optional[str]<br ALIGN="LEFT"/>is_reminder_set : bool<br ALIGN="LEFT"/>location : Optional[str]<br ALIGN="LEFT"/>reminder_minutes_before : Optional[int]<br ALIGN="LEFT"/>start : datetime<br ALIGN="LEFT"/>subject : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"agent_core.tools.calendar.calendar_tool.CalendarTool" [color="black", fontcolor="black", label=<{CalendarTool|create_event_tool<br ALIGN="LEFT"/>ms_graph_url : str<br ALIGN="LEFT"/>scopes : list<br ALIGN="LEFT"/>view_events_tool<br ALIGN="LEFT"/>|create_event(subject: str, start_time: str, duration: int, location: str): Dict[str, Any]<br ALIGN="LEFT"/>get_event_details(event_id: str): str<br ALIGN="LEFT"/>get_events(count: int, days: int): List[Dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.tools.emails.email_tool.EmailTool" [color="black", fontcolor="black", label=<{EmailTool|ms_graph_url : str<br ALIGN="LEFT"/>read_emails_tool<br ALIGN="LEFT"/>scopes : list<br ALIGN="LEFT"/>|read_recent_emails(count: float, batch_size: float): List[Dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.types.messages.FinalAnswer" [color="black", fontcolor="black", label=<{FinalAnswer|output : str<br ALIGN="LEFT"/>|is_final()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.llm.gemini.GeminiLLM" [color="black", fontcolor="black", label=<{GeminiLLM|embedding_model : GenerativeModel<br ALIGN="LEFT"/>model : GenerativeModel<br ALIGN="LEFT"/>|complete(prompt: str, functions: dict): dict<br ALIGN="LEFT"/>embed_text(text: str): list[float]<br ALIGN="LEFT"/>parse_response(response: dict): Union[ToolCall, FinalAnswer]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.llm.llm_client.LLMClient" [color="black", fontcolor="black", label=<{LLMClient|model<br ALIGN="LEFT"/>|complete(prompt: str, functions: list): dict<br ALIGN="LEFT"/>parse_response(response: dict)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.llm.planner.LLMPlanner" [color="black", fontcolor="black", label=<{LLMPlanner|llm_client<br ALIGN="LEFT"/>prompt_builder<br ALIGN="LEFT"/>tool_registry : str<br ALIGN="LEFT"/>|choose_action(state: 'AgentState'): Union[ToolCall, FinalAnswer]<br ALIGN="LEFT"/>force_finish(state: 'AgentState'): str<br ALIGN="LEFT"/>on_tool_completion(tool_name: str, result: Any)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.logs.models.LogEntry" [color="black", fontcolor="black", label=<{LogEntry|agent_response : str<br ALIGN="LEFT"/>memory_used : Optional[list]<br ALIGN="LEFT"/>timestamp : str<br ALIGN="LEFT"/>tool_called : Optional[str]<br ALIGN="LEFT"/>tool_output : Optional[str]<br ALIGN="LEFT"/>user_input : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"memory.client.MemoryDBClient" [color="black", fontcolor="black", label=<{MemoryDBClient|Session : sessionmaker<br ALIGN="LEFT"/>engine : Engine, MockConnection, NoneType<br ALIGN="LEFT"/>|add_record(user_id: int, content: str, metadata: dict)<br ALIGN="LEFT"/>embed_text(text: str): np.ndarray<br ALIGN="LEFT"/>query_records(user_id: int, query: str, n_results: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"memory.interface.MemoryInterface" [color="black", fontcolor="black", label=<{MemoryInterface|<br ALIGN="LEFT"/>|<I>add</I>(user_id: int, content: str, metadata: dict)<br ALIGN="LEFT"/><I>query</I>(user_id: int, query: str, k: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"memory.client.MemoryRecord" [color="black", fontcolor="black", label=<{MemoryRecord|content<br ALIGN="LEFT"/>document<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>meta_data<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>vector<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"agent_core.tests.mock_database.MockMemoryDBClient" [color="black", fontcolor="black", label=<{MockMemoryDBClient|records : list<br ALIGN="LEFT"/>|add_record(user_id: int, content: str, metadata: dict)<br ALIGN="LEFT"/>query_records(user_id: int, query: str, n_results: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.tools.calendar.calendar.OutlookCalendarService" [color="black", fontcolor="black", label=<{OutlookCalendarService|app : ConfidentialClientApplication<br ALIGN="LEFT"/>client : NoneType<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>|check_availability(start: datetime, end: datetime): List[dict]<br ALIGN="LEFT"/>create_event(event: CalendarEvent): CalendarEvent<br ALIGN="LEFT"/>delete_event(event_id: str): bool<br ALIGN="LEFT"/>update_event(event_id: str, event: CalendarEvent): CalendarEvent<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.tools.calendar.calendar.OutlookConfig" [color="black", fontcolor="black", label=<{OutlookConfig|CLIENT_ID : str<br ALIGN="LEFT"/>CLIENT_SECRET : str<br ALIGN="LEFT"/>SCOPES : list[str]<br ALIGN="LEFT"/>TENANT_ID : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"agent_core.llm.prompt_builder.PromptBuilder" [color="black", fontcolor="black", label=<{PromptBuilder|tool_registry : str<br ALIGN="LEFT"/>|build(state: AgentState): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.tests.test_memory.TestMemory" [color="black", fontcolor="black", label=<{TestMemory|client<br ALIGN="LEFT"/>memory<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_add_record()<br ALIGN="LEFT"/>test_no_results()<br ALIGN="LEFT"/>test_query_records()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.tools.base.Tool" [color="black", fontcolor="black", label=<{Tool|category : NoneType, str<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>func : Callable<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>parameters : Dict<br ALIGN="LEFT"/>|execute()<br ALIGN="LEFT"/>set_category(category: str)<br ALIGN="LEFT"/>validate_args(kwargs: Dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.types.messages.ToolCall" [color="black", fontcolor="black", label=<{ToolCall|args : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|is_final()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.tools.base.ToolRegistry" [color="black", fontcolor="black", label=<{ToolRegistry|tools : Dict[str, Tool]<br ALIGN="LEFT"/>|get_schema(): dict<br ALIGN="LEFT"/>get_tools_by_category(category: str): Dict[str, Tool]<br ALIGN="LEFT"/>register(tool: Tool)<br ALIGN="LEFT"/>run_tool(name: str): Any<br ALIGN="LEFT"/>set_planner(planner: 'LLMPlanner')<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"memory.client.VectorMemory" [color="black", fontcolor="black", label=<{VectorMemory|client<br ALIGN="LEFT"/>|add(content: str, metadata: dict)<br ALIGN="LEFT"/>query(query: str, k: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"agent_core.llm.gemini.GeminiLLM" -> "agent_core.llm.llm_client.LLMClient" [arrowhead="empty", arrowtail="none"];
"agent_core.tests.mock_database.MockMemoryDBClient" -> "memory.client.MemoryDBClient" [arrowhead="empty", arrowtail="none"];
"memory.client.VectorMemory" -> "memory.interface.MemoryInterface" [arrowhead="empty", arrowtail="none"];
"agent_core.agent_runner.AgentRunner" -> "agent_core.core.AgentCore" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="runner", style="solid"];
"agent_core.llm.planner.LLMPlanner" -> "agent_core.core.AgentCore" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="planner", style="solid"];
"agent_core.llm.prompt_builder.PromptBuilder" -> "agent_core.llm.planner.LLMPlanner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prompt_builder", style="solid"];
"agent_core.tests.mock_database.MockMemoryDBClient" -> "agent_core.tests.test_memory.TestMemory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client", style="solid"];
"agent_core.tools.base.Tool" -> "agent_core.tools.calendar.calendar_tool.CalendarTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="view_events_tool", style="solid"];
"agent_core.tools.base.Tool" -> "agent_core.tools.calendar.calendar_tool.CalendarTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="create_event_tool", style="solid"];
"agent_core.tools.base.Tool" -> "agent_core.tools.emails.email_tool.EmailTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="read_emails_tool", style="solid"];
"memory.interface.MemoryInterface" -> "agent_core.tests.test_memory.TestMemory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="memory", style="solid"];
"agent_core.llm.llm_client.LLMClient" -> "agent_core.llm.planner.LLMPlanner" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="llm_client", style="solid"];
"agent_core.tools.calendar.calendar.OutlookConfig" -> "agent_core.tools.calendar.calendar.OutlookCalendarService" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"memory.client.MemoryDBClient" -> "memory.client.VectorMemory" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="client", style="solid"];
}
