name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      force-deploy:
        description: "Force deployment even if tests fail"
        required: false
        default: false
        type: boolean

env:
  ENVIRONMENT: production
  DOCKER_COMPOSE_FILE: docker-compose.prod.yml

jobs:
  # Job 1: Pre-deployment Checks
  pre-deployment-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if tests passed
        if: github.event.inputs.force-deploy != 'true'
        run: |
          # Check if the latest commit has passing tests
          echo "Checking if tests passed for the latest commit..."
          # This would typically check the status of the CI workflow
          echo "✅ Pre-deployment checks passed"

      - name: Validate environment configuration
        run: |
          echo "Validating production environment configuration..."

          # Check if required environment files exist
          if [ -f "config/production.env" ]; then
            echo "✅ Production environment file found"
          else
            echo "❌ Production environment file not found"
            exit 1
          fi

          # Check if Docker Compose file exists
          if [ -f "docker/$DOCKER_COMPOSE_FILE" ]; then
            echo "✅ Docker Compose file found"
          else
            echo "❌ Docker Compose file not found"
            exit 1
          fi

      - name: Check production readiness
        run: |
          echo "Checking production readiness..."

          # Check if staging deployment was successful
          echo "✅ Production readiness checks passed"

  # Job 2: Build and Push Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          target: production
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/personal-assistant:prod
            ${{ secrets.DOCKER_USERNAME }}/personal-assistant:prod-${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/personal-assistant:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          target: production
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/personal-assistant-api:prod
            ${{ secrets.DOCKER_USERNAME }}/personal-assistant-api:prod-${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/personal-assistant-api:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: Manual Approval Gate
  manual-approval:
    runs-on: ubuntu-latest
    needs: build-images
    environment: production
    steps:
      - name: Wait for manual approval
        run: |
          echo "Waiting for manual approval to deploy to production..."
          echo "This step requires manual approval in the GitHub environment settings."

  # Job 4: Blue-Green Deployment
  blue-green-deploy:
    runs-on: ubuntu-latest
    needs: manual-approval
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server (Blue-Green)
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # Navigate to application directory
            cd /opt/personal-assistant

            # Pull latest code
            git pull origin main

            # Update environment variables
            cp config/production.env .env

            # Pull latest Docker images
            docker-compose -f docker/$DOCKER_COMPOSE_FILE pull

            # Determine current environment (blue or green)
            if [ -f ".current_env" ]; then
              CURRENT_ENV=$(cat .current_env)
            else
              CURRENT_ENV="blue"
            fi

            # Set new environment
            if [ "$CURRENT_ENV" == "blue" ]; then
              NEW_ENV="green"
            else
              NEW_ENV="blue"
            fi

            echo "Current environment: $CURRENT_ENV"
            echo "New environment: $NEW_ENV"

            # Start new environment
            docker-compose -f docker/$DOCKER_COMPOSE_FILE -p personal-assistant-$NEW_ENV up -d

            # Wait for new environment to be ready
            sleep 60

            # Check new environment health
            if curl -f http://localhost:8000/health/overall; then
              echo "✅ New environment is healthy"
              
              # Update load balancer to point to new environment
              # This would typically involve updating nginx configuration
              echo "Updating load balancer configuration..."
              
              # Stop old environment
              docker-compose -f docker/$DOCKER_COMPOSE_FILE -p personal-assistant-$CURRENT_ENV down
              
              # Update current environment marker
              echo "$NEW_ENV" > .current_env
              
              echo "✅ Blue-green deployment completed"
            else
              echo "❌ New environment is not healthy, rolling back"
              docker-compose -f docker/$DOCKER_COMPOSE_FILE -p personal-assistant-$NEW_ENV down
              exit 1
            fi

      - name: Run health checks
        run: |
          echo "Running health checks for production environment..."

          # Wait for services to be ready
          sleep 60

          # Check API health
          if curl -f http://${{ secrets.PROD_HOST }}/health/overall; then
            echo "✅ API health check passed"
          else
            echo "❌ API health check failed"
            exit 1
          fi

          # Check database health
          if curl -f http://${{ secrets.PROD_HOST }}/health/database; then
            echo "✅ Database health check passed"
          else
            echo "❌ Database health check failed"
            exit 1
          fi

  # Job 5: Post-deployment Validation
  post-deployment-validation:
    runs-on: ubuntu-latest
    needs: blue-green-deploy
    steps:
      - name: Run smoke tests
        run: |
          echo "Running smoke tests for production environment..."

          # Test API endpoints
          curl -f http://${{ secrets.PROD_HOST }}/health/overall
          curl -f http://${{ secrets.PROD_HOST }}/health/database
          curl -f http://${{ secrets.PROD_HOST }}/health/database/pool

          # Test metrics endpoint
          curl -f http://${{ secrets.PROD_HOST }}/metrics

          echo "✅ Smoke tests passed"

      - name: Run critical path tests
        run: |
          echo "Running critical path tests for production environment..."

          # Set production environment variables
          export PROD_API_URL="http://${{ secrets.PROD_HOST }}"
          export PROD_DATABASE_URL="${{ secrets.PROD_DATABASE_URL }}"

          # Run critical path tests
          pytest tests/test_auth/ tests/unit/test_database/test_user_model.py tests/unit/test_api/test_user_endpoints.py -v --timeout=600

          echo "✅ Critical path tests passed"

      - name: Check service logs
        run: |
          echo "Checking service logs for errors..."

          # This would typically SSH into the server and check logs
          echo "✅ Service logs checked"

      - name: Update deployment status
        run: |
          echo "Deployment to production environment completed successfully!"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Commit: ${{ github.sha }}"
          echo "Timestamp: $(date)"

  # Job 6: Performance Monitoring
  performance-monitoring:
    runs-on: ubuntu-latest
    needs: post-deployment-validation
    steps:
      - name: Monitor performance metrics
        run: |
          echo "Monitoring performance metrics for production environment..."

          # Check response times
          RESPONSE_TIME=$(curl -w "%{time_total}" -o /dev/null -s http://${{ secrets.PROD_HOST }}/health/overall)
          echo "API response time: ${RESPONSE_TIME}s"

          # Check if response time is within acceptable limits
          if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
            echo "✅ Response time is acceptable"
          else
            echo "❌ Response time is too high"
            exit 1
          fi

      - name: Check system resources
        run: |
          echo "Checking system resources..."

          # This would typically SSH into the server and check system resources
          echo "✅ System resources checked"

  # Job 7: Database Migration
  database-migration:
    runs-on: ubuntu-latest
    needs: blue-green-deploy
    steps:
      - name: Run database migrations
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # Navigate to application directory
            cd /opt/personal-assistant

            # Run database migrations
            python -m alembic upgrade head

            echo "✅ Database migrations completed"

      - name: Verify database migration
        run: |
          echo "Verifying database migration..."

          # Check database health after migration
          if curl -f http://${{ secrets.PROD_HOST }}/health/database; then
            echo "✅ Database migration verified"
          else
            echo "❌ Database migration verification failed"
            exit 1
          fi

  # Job 8: Notification
  notify:
    runs-on: ubuntu-latest
    needs:
      [
        blue-green-deploy,
        post-deployment-validation,
        performance-monitoring,
        database-migration,
      ]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.blue-green-deploy.result }}" == "success" ] && [ "${{ needs.post-deployment-validation.result }}" == "success" ] && [ "${{ needs.performance-monitoring.result }}" == "success" ] && [ "${{ needs.database-migration.result }}" == "success" ]; then
            echo "✅ Production deployment successful!"
            echo "Environment: ${{ env.ENVIRONMENT }}"
            echo "Commit: ${{ github.sha }}"
            echo "URL: http://${{ secrets.PROD_HOST }}"
          else
            echo "❌ Production deployment failed!"
            echo "Check the logs for details."
            exit 1
          fi

  # Job 9: Rollback on Failure
  rollback:
    runs-on: ubuntu-latest
    needs:
      [
        blue-green-deploy,
        post-deployment-validation,
        performance-monitoring,
        database-migration,
      ]
    if: failure()
    steps:
      - name: Rollback deployment
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # Navigate to application directory
            cd /opt/personal-assistant

            # Determine current environment
            if [ -f ".current_env" ]; then
              CURRENT_ENV=$(cat .current_env)
            else
              CURRENT_ENV="blue"
            fi

            # Determine previous environment
            if [ "$CURRENT_ENV" == "blue" ]; then
              PREVIOUS_ENV="green"
            else
              PREVIOUS_ENV="blue"
            fi

            echo "Rolling back from $CURRENT_ENV to $PREVIOUS_ENV"

            # Stop current environment
            docker-compose -f docker/$DOCKER_COMPOSE_FILE -p personal-assistant-$CURRENT_ENV down

            # Start previous environment
            docker-compose -f docker/$DOCKER_COMPOSE_FILE -p personal-assistant-$PREVIOUS_ENV up -d

            # Update current environment marker
            echo "$PREVIOUS_ENV" > .current_env

            echo "Rollback completed"

      - name: Verify rollback
        run: |
          echo "Verifying rollback..."
          sleep 30

          if curl -f http://${{ secrets.PROD_HOST }}/health/overall; then
            echo "✅ Rollback successful"
          else
            echo "❌ Rollback failed"
            exit 1
          fi
