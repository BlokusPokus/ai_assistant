name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Node dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy

      - name: Install Node dependencies
        run: |
          cd src/apps/frontend
          npm ci

      - name: Python code formatting check
        run: |
          black --check src/
          isort --check-only src/

      - name: Python linting
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Python type checking
        run: |
          mypy src/ --ignore-missing-imports

      - name: Frontend linting
        run: |
          cd src/apps/frontend
          npm run lint

      - name: Frontend type checking
        run: |
          cd src/apps/frontend
          npm run type-check

  # Job 2: Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    continue-on-error: false
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Set up test environment
        run: |
          export TEST_DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
          export TEST_REDIS_URL="redis://localhost:6379"
          export TEST_MODE="true"
          export MOCK_EXTERNAL_SERVICES="true"

      - name: Run unit tests
        run: |
          pytest tests/unit/ tests/test_auth/ tests/tools/ tests/test_*.py -v --cov=src --cov-report=xml --cov-report=html --timeout=300 --timeout-method=thread

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unit-tests
          name: unit-tests-coverage

  # Job 3: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Set up test environment
        run: |
          export TEST_DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
          export TEST_REDIS_URL="redis://localhost:6379"
          export TEST_MODE="true"
          export MOCK_EXTERNAL_SERVICES="true"

      - name: Run integration tests
        run: |
          pytest tests/integration/ tests/test_sms_router/ tests/test_oauth_*.py tests/test_analytics_*.py -v --cov=src --cov-report=xml --cov-report=html --timeout=600 --timeout-method=thread

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: integration-tests
          name: integration-tests-coverage

  # Job 4: End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Set up test environment
        run: |
          export TEST_DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
          export TEST_REDIS_URL="redis://localhost:6379"
          export TEST_MODE="true"
          export MOCK_EXTERNAL_SERVICES="true"

      - name: Run E2E tests
        run: |
          pytest tests/test_user_*.py tests/test_analytics_*.py tests/completed_tasks/ -v --cov=src --cov-report=xml --cov-report=html --timeout=1200 --timeout-method=thread

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: e2e-tests
          name: e2e-tests-coverage

  # Job 5: Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-benchmark

      - name: Set up test environment
        run: |
          export TEST_DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
          export TEST_REDIS_URL="redis://localhost:6379"
          export TEST_MODE="true"
          export MOCK_EXTERNAL_SERVICES="true"

      - name: Run performance tests
        run: |
          pytest tests/test_auth/test_performance.py -v --benchmark-only --benchmark-save=performance --timeout=1200 --timeout-method=thread

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: .benchmarks/

  # Job 6: Build and Test Docker Images
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          target: development
          tags: personal-assistant:dev
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build staging image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          target: production
          tags: personal-assistant:staging
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          target: production
          tags: personal-assistant:prod
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker images
        run: |
          # Test that images can start
          echo "Testing development image..."
          docker run --rm personal-assistant:dev python --version
          echo "Testing staging image..."
          docker run --rm personal-assistant:staging python --version
          echo "Testing production image..."
          docker run --rm personal-assistant:prod python --version
          echo "All Docker images tested successfully!"

  # Job 7: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep

      - name: Run safety check
        run: |
          safety check --json --output safety-report.json || true

      - name: Run bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Run semgrep security scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json src/ || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            semgrep-report.json

  # Job 8: Final Status Check
  ci-status:
    runs-on: ubuntu-latest
    needs:
      [
        code-quality,
        unit-tests,
        integration-tests,
        e2e-tests,
        performance-tests,
        docker-build,
        security-scan,
      ]
    if: always()
    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.code-quality.result }}" == "failure" || 
                "${{ needs.unit-tests.result }}" == "failure" || 
                "${{ needs.integration-tests.result }}" == "failure" || 
                "${{ needs.e2e-tests.result }}" == "failure" || 
                "${{ needs.performance-tests.result }}" == "failure" || 
                "${{ needs.docker-build.result }}" == "failure" || 
                "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "CI pipeline failed"
            exit 1
          else
            echo "CI pipeline passed"
          fi
