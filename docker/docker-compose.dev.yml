version: "3.8"

services:
  # Nginx Reverse Proxy - Development (TLS 1.3, HTTP/2)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: personal_assistant_nginx_dev
    ports:
      - "8081:80" # Different port to avoid conflicts
      - "8445:443" # Different port to avoid conflicts
    volumes:
      - ./nginx/ssl/dev:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - api
    networks:
      - personal_assistant_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Development Server
  frontend:
    build:
      context: ../src/apps/frontend
      dockerfile: Dockerfile.dev
    container_name: personal_assistant_frontend_dev
    ports:
      - "3001:3001"
    volumes:
      - ../src/apps/frontend:/app:ro
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
    depends_on:
      - api
    networks:
      - personal_assistant_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database - Using local Postgres.app instead
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: personal_assistant_postgres
  #   environment:
  #     POSTGRES_DB: postgres
  #     POSTGRES_USER: ianleblanc
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./init-scripts:/docker-entrypoint-initdb.d
  #   ports:
  #     - "5432:5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ianleblanc -d postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s
  #   restart: unless-stopped
  #   networks:
  #     - personal_assistant_network

  # Redis Cache and Queue
  redis:
    image: redis:7-alpine
    container_name: personal_assistant_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - personal_assistant_network

  # Personal Assistant API
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: personal_assistant_api
    env_file:
      - ../config/development.env
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - REAL_DB_URL=postgresql+asyncpg://ianleblanc:password@host.docker.internal:5432/postgres
      - DATABASE_URL=postgresql+asyncpg://ianleblanc:password@host.docker.internal:5432/postgres
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/0
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - DB_POOL_SIZE=10
      - DB_MAX_OVERFLOW=15
      - DB_POOL_TIMEOUT=30
      - DB_POOL_RECYCLE=3600
      - DB_POOL_PRE_PING=true
      - DB_SLOW_QUERY_THRESHOLD_MS=100
      - DB_TABLE_BLOAT_THRESHOLD=20.0
      - DB_INDEX_USAGE_THRESHOLD=10.0
      - DB_POOL_EFFICIENCY_THRESHOLD=80.0
      - DB_QUERY_RESPONSE_P95_THRESHOLD=100
    volumes:
      - ../src:/app/src:ro
      - ../config:/app/config:ro
      - ../logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/overall"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - personal_assistant_network

  # Celery Worker for Background Tasks
  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: personal_assistant_worker
    env_file:
      - ../config/development.env
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - REAL_DB_URL=postgresql+asyncpg://ianleblanc:password@host.docker.internal:5432/postgres
      - DATABASE_URL=postgresql+asyncpg://ianleblanc:password@host.docker.internal:5432/postgres
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/0
      - REDIS_URL=redis://:redis_password@redis:6379/0
    volumes:
      - ../src:/app/src:ro
      - ../config:/app/config:ro
      - ../logs:/app/logs
    command:
      [
        "celery",
        "-A",
        "personal_assistant.workers.celery_app",
        "worker",
        "--loglevel=info",
        "--queues=ai_tasks",
      ]
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - personal_assistant_network

  # Celery Beat Scheduler
  scheduler:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: personal_assistant_scheduler
    env_file:
      - ../config/development.env
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - REAL_DB_URL=postgresql+asyncpg://ianleblanc:password@host.docker.internal:5432/postgres
      - DATABASE_URL=postgresql+asyncpg://ianleblanc:password@host.docker.internal:5432/postgres
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/0
      - REDIS_URL=redis://:redis_password@redis:6379/0
    volumes:
      - ../src:/app/src:ro
      - ../config:/app/config:ro
      - ../logs:/app/logs
    command:
      [
        "celery",
        "-A",
        "personal_assistant.workers.celery_app",
        "beat",
        "--loglevel=info",
      ]
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - personal_assistant_network

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: personal_assistant_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    restart: unless-stopped
    networks:
      - personal_assistant_network

  grafana:
    image: grafana/grafana:latest
    container_name: personal_assistant_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - personal_assistant_network

  # Loki for Log Aggregation - Development
  loki:
    image: grafana/loki:latest
    container_name: personal_assistant_loki_dev
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command:
      - "-config.file=/etc/loki/local-config.yaml"
    restart: unless-stopped
    networks:
      - personal_assistant_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  personal_assistant_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
