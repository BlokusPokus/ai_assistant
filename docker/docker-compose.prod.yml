version: "3.8"

services:
  # PostgreSQL Database - Production (High Availability)
  postgres:
    image: postgres:15-alpine
    container_name: personal_assistant_postgres_prod
    environment:
      POSTGRES_DB: personal_assistant_prod
      POSTGRES_USER: ${PROD_DB_USER}
      POSTGRES_PASSWORD: ${PROD_DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${PROD_DB_USER} -d personal_assistant_prod",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - personal_assistant_prod_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"

  # Redis Cache and Queue - Production (High Availability)
  redis:
    image: redis:7-alpine
    container_name: personal_assistant_redis_prod
    command: redis-server --appendonly yes --requirepass ${PROD_REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - personal_assistant_prod_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"

  # Personal Assistant API - Production (High Availability)
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: personal_assistant_api_prod
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - REAL_DB_URL=postgresql+asyncpg://${PROD_DB_USER}:${PROD_DB_PASSWORD}@postgres:5432/personal_assistant_prod
      - DATABASE_URL=postgresql+asyncpg://${PROD_DB_USER}:${PROD_DB_PASSWORD}@postgres:5432/personal_assistant_prod
      - CELERY_BROKER_URL=redis://:${PROD_REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${PROD_REDIS_PASSWORD}@redis:6379/0
      - REDIS_URL=redis://:${PROD_REDIS_PASSWORD}@redis:6379/0
      - DB_POOL_SIZE=50
      - DB_MAX_OVERFLOW=75
      - DB_POOL_TIMEOUT=30
      - DB_POOL_RECYCLE=3600
      - DB_POOL_PRE_PING=true
      - DB_SLOW_QUERY_THRESHOLD_MS=100
      - DB_TABLE_BLOAT_THRESHOLD=20.0
      - DB_INDEX_USAGE_THRESHOLD=10.0
      - DB_POOL_EFFICIENCY_THRESHOLD=80.0
      - DB_QUERY_RESPONSE_P95_THRESHOLD=100
    volumes:
      - ../src:/app/src:ro
      - ../config:/app/config:ro
      - ../logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/overall"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - personal_assistant_prod_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # Celery Worker for Background Tasks - Production (Scaled)
  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: personal_assistant_worker_prod
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - REAL_DB_URL=postgresql+asyncpg://${PROD_DB_USER}:${PROD_DB_PASSWORD}@postgres:5432/personal_assistant_prod
      - DATABASE_URL=postgresql+asyncpg://${PROD_DB_USER}:${PROD_DB_PASSWORD}@postgres:5432/personal_assistant_prod
      - CELERY_BROKER_URL=redis://:${PROD_REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${PROD_REDIS_PASSWORD}@redis:6379/0
      - REDIS_URL=redis://:${PROD_REDIS_PASSWORD}@redis:6379/0
    volumes:
      - ../src:/app/src:ro
      - ../config:/app/config:ro
      - ../logs:/app/logs
    command:
      [
        "celery",
        "-A",
        "personal_assistant.workers.celery_app",
        "worker",
        "--loglevel=info",
        "--concurrency=4",
        "--max-tasks-per-child=1000",
      ]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - personal_assistant_prod_network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # Celery Beat Scheduler - Production
  scheduler:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: personal_assistant_scheduler_prod
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - REAL_DB_URL=postgresql+asyncpg://${PROD_DB_USER}:${PROD_DB_PASSWORD}@postgres:5432/personal_assistant_prod
      - DATABASE_URL=postgresql+asyncpg://${PROD_DB_USER}:${PROD_DB_PASSWORD}@postgres:5432/personal_assistant_prod
      - CELERY_BROKER_URL=redis://:${PROD_REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${PROD_REDIS_PASSWORD}@redis:6379/0
      - REDIS_URL=redis://:${PROD_REDIS_PASSWORD}@redis:6379/0
    volumes:
      - ../src:/app/src:ro
      - ../config:/app/config:ro
      - ../logs:/app/logs
    command:
      [
        "celery",
        "-A",
        "personal_assistant.workers.celery_app",
        "beat",
        "--loglevel=info",
      ]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - personal_assistant_prod_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # Monitoring Stack - Production
  prometheus:
    image: prom/prometheus:latest
    container_name: personal_assistant_prometheus_prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
      - "--storage.tsdb.retention.size=10GB"
    restart: unless-stopped
    networks:
      - personal_assistant_prod_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"

  grafana:
    image: grafana/grafana:latest
    container_name: personal_assistant_grafana_prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${PROD_GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - personal_assistant_prod_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # Loki for Log Aggregation - Production
  loki:
    image: grafana/loki:latest
    container_name: personal_assistant_loki_prod
    ports:
      - "3100:3100"
    command:
      - "-config.file=/etc/loki/local-config.yaml"
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data_prod:/loki
    restart: unless-stopped
    networks:
      - personal_assistant_prod_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # Jaeger for Distributed Tracing - Production
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: personal_assistant_jaeger_prod
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_JAEGER_UI_BASE_PATH=/jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    restart: unless-stopped
    networks:
      - personal_assistant_prod_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local
  loki_data_prod:
    driver: local

networks:
  personal_assistant_prod_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
